#!/usr/bin/env bash

set -e

### Defines ###
PP_DEFS=""

CONDITIONALS=(
"./src/modules/_modules.go"
"./src/modules/_utils.go"
)

### Automake-like checks ###

function println {
    printf "$1\n"
}

function checkPre {
    printf "Checking $1 ... "
}

function checkIf {
    checkPre "if $1"
}

function checkBin {
    checkPre "for $1"
    command -v $1 2>&1 1>/dev/null || {
        echo "Please install '$1' and try again."
        exit 1
    }
    println "found"
}

checkBin go
checkIf "go is version 1.8.*"
if [[ "$(go version)" != *"go1.8"* ]]; then
    println "no"
    exit 1
fi
println "yes"

checkBin make
checkIf "make supports GNU extensions"
if [[ "$(make -h)" != *"gnu.org"* ]]; then
    println "no"
    exit 1
fi
println "yes"

checkBin cpp
checkBin gpp
checkBin gcc

checkBin glide
checkBin go-bindata
checkBin goimports

### Dynamic compilation ###
while test $# -gt 0; do
    case "$1" in
        --without-music)
        PP_DEFS="$PP_DEFS -DEXCLUDE_MUSIC"
        shift
        ;;

        --without-radio)
        PP_DEFS="$PP_DEFS -DEXCLUDE_RADIO"
        shift
        ;;

        --without-plugins)
        PP_DEFS="$PP_DEFS -DEXCLUDE_PLUGINS"
        shift
        ;;

        --without-triggers)
        PP_DEFS="$PP_DEFS -DEXCLUDE_TRIGGERS"
        shift
        ;;

        *)
        break
        ;;
    esac
done

echo
echo "----- Build Flavour -----"
if [[ "$PP_DEFS" == "" ]];then
    echo "DEFAULT"
else
    echo "${PP_DEFS#"${PP_DEFS%%[![:space:]]*}"}" | tr " " "\n"
fi
echo "-------------------------"
echo

for f in "${CONDITIONALS[@]}"; do
    in="$f"
    out=${f//_}

    [[ -f ${out} ]] && rm ${out}
    ./pp.sh ${in} ${PP_DEFS} > ${out}
    goimports -w ${out}
    sed -i '/^\s*$/d' ${out}
    sed -i '/^\/\// d' ${out}

    echo -e "//DO NOT EDIT THIS FILE UNDER ANY CIRCUMSTANCE\n//IT'S AUTOGENERATED AND WILL BE DELETED EACH TIME YOU RECONFIGURE KAREN.\n\n$(cat ${out})" > ${out}
done
echo ""

### Build makefile ###

printf "Building makefile... "

# Delete old makefile
if [[ -f Makefile ]]; then
    rm Makefile
fi

# Build base makefile
cat build/Makefile.mk > Makefile

# Include jobs
for job in build/jobs.d/*.mk; do
    cat ${job} >> Makefile
    echo "" >> Makefile
done

# Add PHONY targets
echo ".PHONY:" >> Makefile
for job in build/jobs.d/*.mk; do
    job=${job##*/}
    job=${job%.mk}
    sed -i "/^\.PHONY:/ s/\$/ $job/" Makefile
done

printf "done\n"
